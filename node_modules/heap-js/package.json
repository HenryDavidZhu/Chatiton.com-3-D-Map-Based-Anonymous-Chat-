{
  "_from": "heap-js",
  "_id": "heap-js@1.4.1",
  "_inBundle": false,
  "_integrity": "sha512-FzbDInEYubylb3um0RFbyqwrFTk/y7i1lGLbvykNazNYqfIZ/bMJ0KN/kQQfu30JZNE7XzHVlGez6F+hdy15Nw==",
  "_location": "/heap-js",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "heap-js",
    "fetchSpec": "latest",
    "name": "heap-js",
    "raw": "heap-js",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/heap-js/-/heap-js-1.4.1.tgz",
  "_shasum": "d74f38607aa9499cf9da5a6b0fbdd067594b4e7d",
  "_spec": "heap-js",
  "_where": "C:\\Users\\Henry Zhu\\Desktop\\chatiton",
  "author": {
    "email": "ignacio@ignaciolago.com",
    "name": "Ignacio Lago @ignlg"
  },
  "bugs": {
    "url": "https://github.com/ignlg/heap-js/issues"
  },
  "bundleDependencies": false,
  "config": {
    "commitizen": {
      "path": "node_modules/cz-conventional-changelog"
    },
    "validate-commit-msg": {
      "helpMessage": "Use \"yarn commit\" instead, we use conventional-changelog format :) (https://github.com/commitizen/cz-cli)",
      "types": "conventional-commit-types"
    }
  },
  "dependencies": {},
  "deprecated": false,
  "description": "Heap data structure for JavaScript / TypeScript.",
  "devDependencies": {
    "@types/jest": "^24.0.17",
    "@types/node": "^12.7.2",
    "coveralls": "^3.0.6",
    "cross-env": "^5.2.0",
    "cz-conventional-changelog": "^3.0.2",
    "husky": "^3.0.4",
    "jest": "^24.9.0",
    "lint-staged": "^9.2.3",
    "lodash.camelcase": "^4.3.0",
    "prettier": "^1.18.2",
    "rimraf": "^3.0.0",
    "rollup": "^1.19.4",
    "rollup-plugin-commonjs": "^10.0.2",
    "rollup-plugin-node-resolve": "^5.2.0",
    "rollup-plugin-sourcemaps": "^0.4.2",
    "ts-jest": "^24.0.2",
    "ts-node": "^8.3.0",
    "tsc-watch": "^2.4.0",
    "tslint": "^5.18.0",
    "tslint-config-prettier": "^1.18.0",
    "tslint-config-standard": "^8.0.1",
    "typedoc": "^0.15.0",
    "typescript": "^3.5.3",
    "validate-commit-msg": "^2.14.0"
  },
  "engines": {
    "node": ">=10.0.0"
  },
  "files": [
    "dist"
  ],
  "homepage": "https://github.com/ignlg/heap-js#readme",
  "jest": {
    "coveragePathIgnorePatterns": [
      "/node_modules/"
    ],
    "coverageThreshold": {
      "global": {
        "branches": 90,
        "functions": 95,
        "lines": 95,
        "statements": 95
      }
    },
    "moduleFileExtensions": [
      "js",
      "ts",
      "tsx"
    ],
    "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$",
    "transform": {
      ".(ts|tsx)": "<rootDir>/node_modules/ts-jest"
    }
  },
  "keywords": [
    "algorithm",
    "binary heap",
    "binary tree",
    "data structure",
    "heap",
    "priority queue",
    "tree",
    "typescript"
  ],
  "license": "BSD-3-Clause",
  "lint-staged": {
    "src/**/*.ts": [
      "git add",
      "prettier --write --no-semi"
    ]
  },
  "main": "dist/heap-js.umd.js",
  "module": "dist/heap-js.es5.js",
  "name": "heap-js",
  "optionalDependencies": {},
  "readme": "# ![Heap.js](assets/heap-js.png) Heap.js\n\n[![Build Status](https://travis-ci.org/ignlg/heap-js.svg?branch=master)](https://travis-ci.org/ignlg/heap-js)\n[![Dependencies](https://david-dm.org/ignlg/heap-js.png?theme=shields.io)](https://david-dm.org/ignlg/heap-js)\n[![devDependency Status](https://david-dm.org/ignlg/heap-js/dev-status.svg)](https://david-dm.org/ignlg/heap-js#info=devDependencies)\n[![Coverage Status](https://img.shields.io/coveralls/ignlg/heap-js/master.svg?style=flat)](https://coveralls.io/github/ignlg/heap-js?branch=master)\n[![npm version](https://img.shields.io/npm/v/heap-js.svg?style=flat)](https://www.npmjs.com/package/heap-js)\n\n**Heap data structure for JavaScript and TypeScript.**\n\nEasy to use, known interfaces, tested, and well documented JavaScript binary heap library.\n\nInstances are `integer min heap` by default.\n\n## Examples\n\n```js\n// Basic usage example\nimport Heap from 'heap-js';\n\nconst minHeap = new Heap();\nconst maxHeap = new Heap(Heap.maxComparator);\n\nminHeap.init([5, 18, 1]);\nminHeap.push(2);\nconsole.log(minHeap.peek()); //> 1\nconsole.log(minHeap.pop()); //> 1\nconsole.log(minHeap.peek()); //> 2\n```\n\n```js\n// Priority Queue usage example\nconst { Heap } = require('heap-js');\n\nconst tasks = db.collection.find().toArray();\nconst customPriorityComparator = (a, b) => a.priority - b.priority;\n\nconst priorityQueue = new Heap(customPriorityComparator);\npriorityQueue.init(tasks);\n\nwhile (let task = priorityQueue.pop()) {\n  // Do something\n}\n```\n\n```js\n// Python-like static methods example\nimport { Heap } from 'heap-js';\nconst numbers = [2, 3, 7, 5];\n\nHeap.heapify(numbers);\nconsole.log(numbers); //> [ 2, 3, 5, 7 ]\n\nHeap.heappush(numbers, 1);\nconsole.log(numbers); //> [ 1, 2, 5, 7, 3 ]\n```\n\n## Installation\n\n```bash\nyarn add heap-js # if you use yarn\n\nnpm install --save heap-js # if you use npm\n```\n\n## Constructor\n\n```js\nnew Heap([comparator]);\n```\n\nBasic comparators already included:\n\n- `Heap.minComparator` Integer min heap _(default)_\n- `Heap.maxComparator` Integer max heap\n\n## Implements JavaScript style methods\n\n- `length` of the heap\n- `limit` amount of elements in the heap\n- `pop()` the top element\n- `push(...elements)` one or more elements to the heap\n- `pushpop(element)` faster than `push` & `pop`\n- `replace(element)` faster than `pop` & `push`\n- `top(number?)` most valuable elements from the heap\n- `bottom(number?)` least valuable elements from the heap\n\n## Implements Java's `PriorityQueue` interface:\n\n- `add(element)` to the heap\n- `addAll([elment, element, ... ])` to the heap, faster than loop `add`\n- `clear()`\n- `clone()`\n- `comparator()`\n- `contains(element, fn?)`\n- _`element()` alias of `peek()`_\n- `isEmpty()`\n- _`offer(element)` alias of `add(element)`_\n- `peek()`\n- _`poll()` alias of `pop()`_\n- `remove(element?)`\n- _`removeAll()` alias of `clear()`_\n- _`size()` alias of `length`_\n- `toArray()`\n- `toString()`\n\nTo do:\n\n- `containsAll`\n- `equals`\n- `iterator()`\n- `retainAll`\n\n## Implements static Python's `heapq` interface:\n\n- `Heap.heapify(array, comparator?)` that converts an array to an array-heap\n- `Heap.heappop(heapArray, comparator?)` that takes the peek of the array-heap\n- `Heap.heappush(heapArray, item, comparator?)` that appends elements to the array-heap\n- `Heap.heappushpop(heapArray, item, comparator?)` faster than `heappush` & `heappop`\n- `Heap.heapreplace(heapArray, item, comparator?)` faster than `heappop` & `heappush`\n\nExtras:\n\n- `Heap.heaptop(n, heapArray, comparator?)` that returns the `n` most valuable elements of the array-heap\n- `Heap.heapbottom(n, heapArray, comparator?)` that returns the `n` least valuable elements of the array-heap\n\nTo do:\n\n- `merge(...iterables, comparator?)`\n- `nlargest(n, iterable, comparator?)`\n- `nsmallest(n, iterable, comparator?)`\n\n## Documentation\n\nExtensive documentation included at `./dist/docs`. It'll be published to `gh-pages` in a next release.\n\n## Contributing\n\nDevelopment of **Heap.js** happens in the open on GitHub, and I am grateful to the community for contributing bugfixes and improvements.\n\n### Dev setup\n\n```bash\nyarn # if you use yarn\n\nnpm install # if you use npm\n```\n\n### Tests\n\n```bash\nyarn test # if you use yarn\n\nnpm test # if you use npm\n```\n\n### License\n\nHeap.js is [BSD licensed](LICENSE).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/ignlg/heap-js.git"
  },
  "scripts": {
    "build": "tsc --project tsconfig.build.json && rollup -c && rimraf compiled && typedoc --out dist/docs --target es6 --theme minimal src",
    "commit": "git-cz",
    "lint": "tslint --type-check --fix --project tsconfig.json -t codeFrame 'src/**/*.ts'",
    "prebuild": "rimraf dist",
    "precommit": "lint-staged",
    "report-coverage": "cat ./coverage/lcov.info | coveralls",
    "start": "tsc-watch --onSuccess \"rollup -c\"",
    "test": "jest",
    "test:prod": "yarn lint && yarn test -- --coverage --no-cache",
    "test:watch": "jest --watch"
  },
  "types": "dist/types/Heap.d.ts",
  "version": "1.4.1"
}
