{
  "_from": "pusher",
  "_id": "pusher@2.2.2",
  "_inBundle": false,
  "_integrity": "sha512-HQLhon2ZMhMQpWOJQ2NKa6JAYFxRS37oIFGKuA3q6lxF4Yf7k2oFkaZlkODSAVXTBkQ8JaFr53ocPlXy2nAp2g==",
  "_location": "/pusher",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "pusher",
    "fetchSpec": "latest",
    "name": "pusher",
    "raw": "pusher",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/pusher/-/pusher-2.2.2.tgz",
  "_shasum": "6665b7b0bc7eb82e39dd5903983c28ad85f70362",
  "_spec": "pusher",
  "_where": "C:\\Users\\Henry Zhu\\Desktop\\chatiton",
  "author": {
    "email": "support@pusher.com",
    "name": "Pusher"
  },
  "bugs": {
    "url": "https://github.com/pusher/pusher-rest-node/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "fabrik42",
      "email": "fabrik42@gmail.com"
    },
    {
      "name": "Jaewoong Kim",
      "email": "jwoongkim@gmail.com"
    },
    {
      "name": "Phil Leggetter",
      "email": "phil@leggetter.co.uk"
    },
    {
      "name": "Paweł Ledwoń",
      "email": "me@ludvik.pl"
    }
  ],
  "dependencies": {
    "@types/request": "^2.47.1",
    "request": "2.88.0",
    "tweetnacl": "^1.0.0",
    "tweetnacl-util": "^0.15.0"
  },
  "deprecated": false,
  "description": "Node.js client to interact with the Pusher Channels REST API",
  "devDependencies": {
    "expect.js": "=0.3.1",
    "express": "=3.11.0",
    "mocha": "^1.21.5",
    "nock": "^9.6.1",
    "sinon": "=1.10.2",
    "webpack": "^1.12.9"
  },
  "engines": {
    "node": ">= 4.0.0"
  },
  "homepage": "https://github.com/pusher/pusher-rest-node#readme",
  "keywords": [
    "pusher",
    "realtime",
    "websockets"
  ],
  "license": "MIT",
  "main": "lib/pusher",
  "name": "pusher",
  "optionalDependencies": {},
  "readme": "# Pusher Channels Node.js REST library\n\nIn order to use this library, you need to have an account on <https://pusher.com/channels>. After registering, you will need the application credentials for your app.\n\n## Supported platforms\n\nThis SDK supports **Node.js** version 8+.\n\nWe test the library against a selection of Node.js versions which we update over time. Please refer to [travis.yml](https://github.com/pusher/pusher-http-node/blob/master/.travis.yml) for the set of versions that are currently tested with CI.\n\nIf you find any compatibility issues, please [raise an issue](https://github.com/pusher/pusher-http-node/issues/new) in the repository or contact support at [support@pusher.com](support@pusher.com). We will happily investigate reported problems ❤️.\n\n## Installation\n\nYou need to be running at least Node.js 4 to use this library.\n\n```\n$ npm install pusher\n```\n\n### Parse Cloud\n\nIn order to use the library in a Parse Cloud module, install the module into your `cloud/modules` path:\n\n    $ npm install pusher --prefix cloud/modules\n\nThen to build the file bundle for Parse Cloud:\n\n    $ cd cloud/modules/pusher\n    $ npm run parse-build\n\nTo import `Pusher`:\n\n```js\nvar Pusher = require('cloud/modules/node_modules/pusher/parse');\n```\n\n## Importing\n\nIt's possible to use pusher-http-node with typescript or javascript.\n\n```javascript\nconst Pusher = require('pusher');\n```\n\n```typescript\nimport * as Pusher from 'pusher';\n```\n\nAll external APIs should have types in index.d.ts.\n\n## Configuration\n\nThere are 3 ways to configure the client. First one is just using the Pusher constructor:\n\n```javascript\nvar Pusher = require('pusher');\n\nvar channels_client = new Pusher({\n  appId: 'APP_ID',\n  key: 'APP_KEY',\n  secret: 'SECRET_KEY',\n  useTLS: USE_TLS, // optional, defaults to false\n  cluster: 'CLUSTER', // if `host` is present, it will override the `cluster` option.\n  host: 'HOST', // optional, defaults to api.pusherapp.com\n  port: PORT, // optional, defaults to 80 for non-TLS connections and 443 for TLS connections\n  encryptionMasterKey: ENCRYPTION_MASTER_KEY, // a 32 character long key used to derive secrets for end to end encryption (see below!)\n});\n```\n\nFor specific clusters, you can use the `forCluster` function. This is the same as using the `cluster` option in the constructor.\n\n```javascript\nvar Pusher = require('pusher');\n\nvar channels_client = Pusher.forCluster(\"CLUSTER\", {\n  appId: 'APP_ID',\n  key: 'APP_KEY',\n  secret: 'SECRET_KEY',\n  useTLS: USE_TLS, // optional, defaults to false\n  port: PORT, // optional, defaults to 80 for non-TLS connections and 443 for TLS connections\n  encryptionMasterKey: ENCRYPTION_MASTER_KEY, // a 32 character long key used to derive secrets for end to end encryption (see below!)\n});\n```\n\nYou can also specify auth and endpoint options by passing an URL:\n\n```javascript\nvar Pusher = require('pusher');\n\nvar channels_client = Pusher.forURL(\"SCHEME://APP_KEY:SECRET_KEY@HOST:PORT/apps/APP_ID\");\n```\n\nYou can pass the optional second argument with options, as in `forCluster` function.\n\nThis is useful for example on Heroku, which sets the PUSHER_URL environment\nvariable to such URL, if you have the Pusher addon installed.\n\n#### Additional options\n\nThere are a few additional options that can be used in all above methods:\n\n```javascript\nvar Pusher = require('pusher');\n\nvar channels_client = new Pusher({\n  // you can set other options in any of the 3 ways described above\n  proxy: 'HTTP_PROXY_URL', // optional, URL to proxy the requests through\n  timeout: TIMEOUT, // optional, timeout for all requests in milliseconds\n  keepAlive: KEEP_ALIVE // optional, enables keep-alive, defaults to false\n});\n```\n\n## Usage\n\n### Callbacks and error handling\n\n#### API requests\n\nAsynchronous methods on the `Pusher` class (`trigger`, `get` and `post`) take an optional callback as the last argument. After performing the request, the callback is called with three arguments:\n\n- error - if the request can't be performed or returns an error code, error will contain details, otherwise it will be null\n- request - the request object\n- response - the response object - can be undefined if response was not received\n\nAll operational errors are wrapped into a Pusher.RequestError object.\n\n#### WebHooks\n\nIn case accessing data for invalid WebHooks, an Pusher.WebHookError exception will be thrown from the called method. It is recommended to validate the WebHook before interpreting it.\n\n### Publishing events\n\nTo send an event to one or more channels use the trigger function. Channel names can contain only characters which are alphanumeric, '_' or '-' and have to be at most 200 characters long. Event name can be at most 200 characters long too.\n\n#### Single channel\n\n```javascript\nchannels_client.trigger('channel-1', 'test_event', { message: \"hello world\" });\n```\n\n#### Multiple channels\n\nTo trigger an event on multiple channels:\n\n```javascript\nchannels_client.trigger([ 'channel-1', 'channel-2' ], 'test_event', { message: \"hello world\" });\n```\n\nYou can trigger an event to at most 100 channels at once. Passing more than 100 channels will cause an exception to be thrown.\n\n#### Batch events\n\nIf you wish to send multiple events in a single HTTP request, you can pass an array of events to `channels_client.triggerBatch`. You can send up to a maximum of 10 events at once.\n\n```javascript\nvar events = [{\n  channel: \"channel-1\",\n  name: \"test-event-1\",\n  data: {message: \"hello world\"}\n},\n{\n  channel: \"channel-2\",\n  name: \"test-event-2\",\n  data: {message: \"hello another world\"}\n}];\n\nchannels_client.triggerBatch(events);\n```\n\nYou can trigger a batch of up to 10 events.\n\n### Excluding event recipients\n\nIn order to avoid the client that triggered the event from also receiving it, the `trigger` function takes an optional `socketId` parameter. For more informaiton see: <http://pusher.com/docs/publisher_api_guide/publisher_excluding_recipients>.\n\n```javascript\nvar socketId = '1302.1081607';\nchannels_client.trigger(channel, event, data, socketId);\n```\n\n### End-to-end encryption [BETA]\n\nThis library supports end-to-end encryption of your private channels. This means that only you and your connected clients will be able to read your messages. Pusher cannot decrypt them. You can enable this feature by following these steps:\n\n1. You should first set up Private channels. This involves [creating an authentication endpoint on your server](https://pusher.com/docs/authenticating_users).\n\n2. Next, Specify your 32 character `encryption_master_key`. This is secret and you should never share this with anyone. Not even Pusher.\n\n   ```javascript\n   var channels_client = new Pusher({\n     appId: 'APP_ID',\n     key: 'APP_KEY',\n     secret: 'SECRET_KEY',\n     useTLS: true,\n     encryptionMasterKey: 'abcdefghijklmnopqrstuvwxyzabcdef',\n   });\n   ```\n\n3. Channels where you wish to use end-to-end encryption should be prefixed with `private-encrypted-`.\n\n4. Subscribe to these channels in your client, and you're done! You can verify it is working by checking out the debug console on the [https://dashboard.pusher.com/](dashboard) and seeing the scrambled ciphertext.\n\n**Important note: This will __not__ encrypt messages on channels that are not prefixed by `private-encrypted-`.**\n\n**Limitation**: you cannot trigger a single event on multiple channels in a call to `trigger`, e.g.\n\n```javascript\nchannels_client.trigger([ 'channel-1', 'private-encrypted-channel-2' ], 'test_event', { message: \"hello world\" });\n```\n\nRationale: the methods in this library map directly to individual Channels HTTP API requests. If we allowed triggering a single event on multiple channels (some encrypted, some unencrypted), then it would require two API requests: one where the event is encrypted to the encrypted channels, and one where the event is unencrypted for unencrypted channels.\n\n### Authenticating private channels\n\nTo authorise your users to access private channels on Pusher Channels, you can use the `authenticate` function:\n\n```javascript\nvar auth = channels_client.authenticate(socketId, channel);\n```\n\nFor more information see: <http://pusher.com/docs/authenticating_users>\n\n### Authenticating presence channels\n\nUsing presence channels is similar to private channels, but you can specify extra data to identify that particular user:\n\n```javascript\nvar channelData = {\n\tuser_id: 'unique_user_id',\n\tuser_info: {\n\t  name: 'Phil Leggetter'\n\t  twitter_id: '@leggetter'\n\t}\n};\nvar auth = channels_client.authenticate(socketId, channel, channelData);\n```\n\nThe `auth` is then returned to the caller as JSON.\n\nFor more information see: <http://pusher.com/docs/authenticating_users>\n\n### Application state\n\nIt's possible to query the state of the application using the `channels_client.get` function.\n\n```javascript\nchannels_client.get({ path: path, params: params }, callback);\n```\n\nThe `path` property identifies the resource that the request should be made to and the `params` property should be a map of additional query string key and value pairs.\n\nParams can't include following keys:\n- auth_key\n- auth_timestamp\n- auth_version\n- auth_signature\n- body_md5\n\nThe following example provides the signature of the callback and an example of parsing the result:\n```javascript\nchannels_client.get({ path: '/channels', params: {} }, function(error, request, response) {\n\tif (response.statusCode === 200) {\n\t\tvar result = JSON.parse(response.body);\n\t\tvar channelsInfo = result.channels;\n\t}\n});\n```\n\n#### Get the list of channels in an application\n\n```javascript\nchannels_client.get({ path: '/channels', params: params }, callback);\n```\n\nInformation on the optional `params` and the structure of the returned JSON is defined in the [REST API reference](http://pusher.com/docs/rest_api#method-get-channels).\n\n#### Get the state of a channel\n\n```javascript\nchannels_client.get({ path: '/channels/[channel_name]', params: params }, callback);\n```\n\nInformation on the optional `params` option property and the structure of the returned JSON is defined in the [REST API reference](http://pusher.com/docs/rest_api#method-get-channel).\n\n#### Get the list of users in a presence channel\n\n```javascript\nchannels_client.get({ path: '/channels/[channel_name]/users' }, callback);\n```\n\nThe `channel_name` in the path must be a [presence channel](http://pusher.com/docs/presence). The structure of the returned JSON is defined in the [REST API reference](http://pusher.com/docs/rest_api#method-get-users).\n\n### WebHooks\n\nThe library provides a simple helper for WebHooks, which can be accessed via Pusher instances:\n\n```javascript\nvar webhook = channels_client.webhook(request);\n```\n\nRequests must expose following fields:\n- headers - object with request headers indexed by lowercase header names\n- rawBody - string with the WebHook request body\n\nSince neither Node.js nor express provide the body in the request, your application needs to read it and assign to the request object. See examples/webhook_endpoint.js for a simple webhook endpoint implementation using the express framework.\n\nHeaders object must contain following headers:\n- x-pusher-key - application key, sent by Channels\n- x-pusher-signature - WebHook signature, generated by Channels\n- content-type - must be set to application/json, what Channels does\n\nAfter instantiating the WebHook object, you can use its following methods:\n\n#### isValid\n\nValidates the content type, body format and signature of the WebHook and returns a boolean. Your application should validate incoming webhooks, otherwise they could be faked.\n\nAccepts an optional parameter containing additional application tokens (useful e.g. during migrations):\n\n```javascript\nvar webhook = channels_client.webhook(request);\n// will check only the key and secret assigned to the pusher object:\nwebhook.isValid();\n// will also check two additional tokens:\nwebhook.isValid([{ key: \"x1\", secret: \"y1\" }, { key: \"x2\", secret: \"y2\" }]);\n```\n\n#### getData\n\nReturns the parsed WebHook body. Throws a Pusher.WebHookError if the WebHook is invalid, so please check the `isValid` result before accessing the data.\n\n```javascript\n// will return an object with the WebHook data\nwebhook.getData();\n```\n\nPlease read [the WebHooks documentation](http://pusher.com/docs/webhooks) to find out what fields are included in the body.\n\n#### getEvents\n\nReturns events included in the WebHook as an array. Throws a Pusher.WebHookError if the WebHook is invalid, so please check the `isValid` result before accessing the events.\n\n```javascript\n// will return an array with the events\nwebhook.getEvents();\n```\n\n#### getTime\n\nReturns the Date object for the time when the WebHook was sent from Channels. Throws a `Pusher.WebHookError` if the WebHook is invalid, so please check the `isValid` result before accessing the time.\n\n```javascript\n// will return a Date object\nwebhook.getTime();\n```\n\n### Generating REST API signatures\n\nIf you wanted to send the REST API requests manually (e.g. using a different HTTP client), you can use the `createSignedQueryString` method to generate the whole request query string that includes the auth keys and your parameters.\n\n```javascript\nchannels_client.createSignedQueryString({\n  method: \"POST\",                                              // the HTTP request method\n  path: \"/apps/3/events\",                                      // the HTTP request path\n  body: '{\"name\":\"foo\",\"channel\":\"donuts\",\"data\":\"2-for-1\"}',  // optional, the HTTP request body\n  params: {},                                                  // optional, the query params\n});\n```\n\nThe `params` object can't contain following keys, as they are used to sign the request:\n\n- auth_key\n- auth_timestamp\n- auth_version\n- auth_signature\n- body_md5\n\n\n\n\n## Testing\n\nThe tests run using [Mocha](http://mochajs.org/). Make sure\nyou've got all required modules installed:\n\n    npm install\n\n### Running the local test suite\n\nYou can run local integration tests without setting up a Pusher Channels app:\n\n    node_modules/.bin/mocha tests/integration/**/*.js\n\n### Running the complete test suite\n\nIn order to run the full test suite, first you need a Pusher Channels app. When starting\nmocha, you need to set the PUSHER_URL environment variable to contain your\napp credentials, like following:\n\n    `PUSHER_URL='http://KEY:SECRET@api-CLUSTER.pusher.com/apps/APP_ID' node_modules/.bin/mocha $(find tests)`\n\n## Credits\n\nThis library is based on the work of:\n* Christian Bäuerlein and his library pusher.\n* Jaewoong Kim and the node-pusher library.\n\n## License\n\nThis code is free to use under the terms of the MIT license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/pusher/pusher-rest-node.git"
  },
  "scripts": {
    "parse-build": "echo 'Creating build for Parse Cloud.' && webpack --config=./parse.webpack.js",
    "prepublish": "npm run parse-build",
    "test": "mocha tests/integration/**/*.js"
  },
  "typings": "index.d.ts",
  "version": "2.2.2"
}
